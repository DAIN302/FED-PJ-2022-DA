@charset "utf-8";

/* 큐브 애니메이션 CSS - cube.css */

html, body{
    margin: 0;
    padding: 0;
}

body {
    height: 100vh;
    background-image: linear-gradient(to bottom, pink, white);
}

/* 변수 세팅 */
:root {
    /* --변수명 : 값; */
    /* 큐브 공통 크기 */
    --csz : 300px;
}

/* 큐브 */
.cube {
    position: absolute;
    top: calc(50% - var(--csz)/2);
    left: calc(50% - var(--csz)/2);
    /* 정중앙 계산 : 50% - 크기절반 */
    /* calc() 연산 시 주의사항 -> +,-는 기호 앞 뒤 띄어쓰기 *,/는 붙여써도 됨 */
    width: var(--csz);
    height: var(--csz);

    /* 
        [ 입체로 설정 ]
          - 입체로 설정할 요소의 부모박스에 아래와 같이 설정
            (부모는 싸고 있는 요소) 
          - transform-style: preserve-3d;
          - 기본값은 2D 설정인 flat
          - preserve-3d 
    */
    transform-style: preserve-3d;

    /*  입체를 잘보이게 하기 위해 약간 회전  */
    transform: rotateX(10deg) rotateY(30deg);
    /* outline: 2px dashed red; */

}

/* 큐브회전 클래스 */
.cube-ani {
    /* 큐브 애니 */
    animation : cubeAni 4s linear infinite;
}

/* 큐브 각면 공통 */
.cube span {
    position: absolute;
    /* absolute -> display block이 자동으로 된다 */
    width: 100%;
    height: 100%;
    /* 부모 -> .cube */
    opacity: 0.8;
    /* outline: 1px solid #555; */
}

/* 1. 앞면 */
.cube span:nth-child(1) {
    background: url(../images/newyorkCity.jpg) no-repeat right/auto 105%;

    /* 화면방향(z-축 방향 이동) */
    transform: translateZ(calc(var(--csz)/2));
    /* 큐브 사이즈의 절반을 앞쪽으로 이동 */
}
/* 2. 오른면 */
.cube span:nth-child(2) {
    background: url(../images/seoulCity.jpg) no-repeat center/cover;

    /* 화면방향(z-축 방향 이동) */
    transform: rotateY(90deg) translateZ(calc(var(--csz)/2));
    /* 먼저 y축 회전 후 큐브사이즈 절반을 앞쪽으로 이동 */
}
/* 3. 뒷면 */
.cube span:nth-child(3) {
    background: url(../images/parisCity.jpg) no-repeat center/cover;

    /* 화면방향(z-축 방향 이동) */
    transform: rotateY(180deg) translateZ(calc(var(--csz)/2));
    /* 먼저 y축 회전 후 큐브사이즈 절반을 앞쪽으로 이동 */
}
/* 4. 왼쪽면 */
.cube span:nth-child(4) {
    background: url(../images/cityMain.jpg) no-repeat center/cover;

    /* 화면방향(z-축 방향 이동) */
    transform: rotateY(270deg) translateZ(calc(var(--csz)/2));
    /* 먼저 y축 회전 후 큐브사이즈 절반을 앞쪽으로 이동 */
}
/* 5. 윗면 */
.cube span:nth-child(5) {
    background: url(../images/citys.jpg) no-repeat center/100% 120%;

    /* 화면방향(z-축 방향 이동) */
    transform: rotateX(90deg) translateZ(calc(var(--csz)/2));
    /* 먼저 x축 회전 후 큐브사이즈 절반을 앞쪽으로 이동 */
}
/* 6. 왼쪽면 */
.cube span:nth-child(6) {
    background: url(../images/London_city.jpg) no-repeat center/cover;

    /* 화면방향(z-축 방향 이동) */
    transform: rotateX(-90deg) translateZ(calc(var(--csz)/2));
    /* 먼저 y축 회전 후 큐브사이즈 절반을 앞쪽으로 이동 */
}


/* 큐브 회전 키프레임 */
@keyframes cubeAni {
    to {
        transform: rotateX(370deg) rotateY(-330deg);
        /* 
            x축 양의 방향으로 10도에서 출발
            양의 방향 360도 + 10도 = 370도
            음의 방향 -360도 + 10도 = -350도
            __________________________________________________
            y축 양의 방향으로 30도에서 출발
            양의 방향 360도 + 30도 = 390도
            음의 방향 -360도 + 30도 = -330도
            
        */
        /* transform: rotateX(370deg) rotateY(-330deg) rotateZ(360deg); */
    }
    
}